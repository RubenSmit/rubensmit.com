"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _unified = require("unified");

var _unified2 = _interopRequireDefault(_unified);

var _rehypeStringify = require("rehype-stringify");

var _rehypeStringify2 = _interopRequireDefault(_rehypeStringify);

var _rehypeReact = require("rehype-react");

var _rehypeReact2 = _interopRequireDefault(_rehypeReact);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// here we optimize structure just a little to have to smallest json possible
var createElement = function createElement(component, props, children) {
  return (0, _extends3.default)({
    t: component
  }, props && (0, _keys2.default)(props).length ? { p: props } : {}, children ? { c: children } : {});
};

exports.default = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      output = _ref.output,
      plugins = _ref.plugins;

  var processor = (0, _unified2.default)();
  if (plugins) plugins.forEach(function (plugin) {
    if (typeof plugin === "function") {
      processor.use(plugin);
      return;
    }
    if (typeof plugin === "string") {
      // $FlowFixMe ðŸ¤«
      processor.use(require(plugin));
      return;
    }
    if (Array.isArray(plugin) && plugin.length === 2) {
      if (typeof plugin[0] === "function") {
        processor.use(plugin[0], plugin[1]);
        return;
      }
      if (typeof plugin[0] === "string") {
        // $FlowFixMe ðŸ¤«
        processor.use(require(plugin[0]), plugin[1]);
        return;
      }
    }
    throw new Error("A plugin for 'unified' can be a string (module name), a function, or an array of [string|function, {options}]. You gave " + plugin.toString());
  });

  if (output === "json") {
    processor.use(_rehypeReact2.default, { createElement: createElement });
  } else {
    processor.use(_rehypeStringify2.default);
  }

  return processor;
};