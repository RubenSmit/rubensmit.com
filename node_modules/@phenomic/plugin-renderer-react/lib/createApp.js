"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderApp = undefined;

var _react = require("react");

var React = _interopRequireWildcard(_react);

var _reactDom = require("react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _reactHotLoader = require("react-hot-loader");

var _Provider = require("./components/Provider");

var _Provider2 = _interopRequireDefault(_Provider);

var _store = require("./shared/store");

var _store2 = _interopRequireDefault(_store);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var debug = require("debug")("phenomic:plugin:renderer-react");

var defaultRender = typeof document !== "undefined" && !document.querySelector("#phenomic-DevLoader") && _reactDom2.default.hydrate ? _reactDom2.default.hydrate : _reactDom2.default.render;

var store = void 0;

var renderApp = exports.renderApp = function renderApp(routes) {
  var render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultRender;
  var callback = arguments[2];

  debug("client rendering");

  var initialStateNode = document.getElementById("PhenomicHydration");
  store = store || (0, _store2.default)(initialStateNode && initialStateNode.textContent ? JSON.parse(initialStateNode.textContent) : undefined);

  var root = document.getElementById("PhenomicRoot");
  if (!root) {
    root = document.createElement("div");
    root.id = "PhenomicRoot";
    if (!document.body) {
      throw new Error("Rendering the app without a body element is impossible");
    }
    document.body.appendChild(root);
  }

  render(React.createElement(
    _reactHotLoader.AppContainer,
    null,
    React.createElement(
      _Provider2.default,
      { store: store },
      routes()
    )
  ), root, callback);
};

exports.default = function (routes, render, callback) {
  if (typeof window !== "undefined") {
    renderApp(routes, render, callback);
  }
  return {
    routes: routes()
  };
};