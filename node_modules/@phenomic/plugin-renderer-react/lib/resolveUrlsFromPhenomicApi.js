"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _set = require("babel-runtime/core-js/set");

var _set2 = _interopRequireDefault(_set);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _fetch = require("@phenomic/api-client/lib/fetch");

var _fetch2 = _interopRequireDefault(_fetch);

var _query = require("@phenomic/api-client/lib/query");

var _query2 = _interopRequireDefault(_query);

var _helpers = require("@phenomic/core/lib/api/helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:plugin:renderer-react");

var defaultQueryKey = "default";
var mainKey = "id";

var arrayUnique = function arrayUnique(array) {
  return [].concat((0, _toConsumableArray3.default)(new _set2.default(array)));
};

var getMainQuery = function getMainQuery(routeQueries, route) {
  var keys = (0, _keys2.default)(routeQueries);
  var firstKey = keys[0];
  var firstKeyAsInt = parseInt(firstKey, 10);
  // parseInt("12.") == "12"
  if (
  // $FlowFixMe it's on purpose
  firstKeyAsInt == firstKey && String(firstKeyAsInt).length == firstKey.length) {
    console.warn("The main path used for " + route.path + " is " + firstKey);
  }
  return { key: firstKey, item: routeQueries[firstKey] };
};

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(route) {
    var routeQueries, mainQuery, key, queryResult, list, urlsData, finalUrlsData, reAfter;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (route.component.getQueries) {
              _context.next = 2;
              break;
            }

            return _context.abrupt("return", false);

          case 2:
            routeQueries = route.component.getQueries({
              // why are we doing this?
              params: route.params || {}
            });
            mainQuery = getMainQuery(routeQueries, route);

            if (mainQuery.item) {
              _context.next = 7;
              break;
            }

            debug("no query detected for", route.path);
            return _context.abrupt("return", false);

          case 7:

            debug(route.path, "fetching path '" + mainQuery.key + "'", routeQueries);
            key = routeQueries[mainQuery.key] && routeQueries[mainQuery.key].by || mainKey;

            if (key === defaultQueryKey) {
              key = mainKey;
            }
            queryResult = void 0;
            _context.prev = 11;
            _context.next = 14;
            return (0, _fetch2.default)((0, _query2.default)({ path: mainQuery.item.path }));

          case 14:
            queryResult = _context.sent;
            _context.next = 20;
            break;

          case 17:
            _context.prev = 17;
            _context.t0 = _context["catch"](11);
            throw _context.t0.error || _context.t0;

          case 20:
            debug(route.path, "path fetched. " + queryResult.list.length + " items (id: " + key + ")");
            // get all possible values for the query
            list = arrayUnique(queryResult.list.reduce(function (acc, item) {
              if (!item[key]) return acc;
              if (Array.isArray(item[key])) acc = acc.concat(item[key]);else acc.push(item[key]);
              return acc;
            }, []));

            debug(route.path, "list (unique)", list);
            urlsData = list.reduce(function (acc, value) {
              var resolvedPath = route.path.replace(":" + key, value);
              var params = (0, _defineProperty3.default)({}, key, value);

              // try * if url has not param
              if (key === mainKey && resolvedPath === route.path) {
                resolvedPath = resolvedPath.replace("*", value);
                // react-router splat is considered as the id
                params = { splat: value };
              }
              if (route.path !== resolvedPath) acc.push((0, _extends3.default)({}, route, { path: resolvedPath, params: params }));
              return acc;
            }, []);


            debug(route.path, "urls data", urlsData);

            // if no data found, we still try to render something
            finalUrlsData = urlsData.length ? urlsData : [{ path: route.path }];
            // try :after with key

            reAfter = /:after\b/;
            return _context.abrupt("return", finalUrlsData.reduce(function (acc, routeData) {
              if (!routeData.path.match(reAfter)) {
                acc.push(routeData.path);
              } else {
                queryResult.list.map(function (item) {
                  // $FlowFixMe params[key] act as a truthy value
                  if (routeData.params && routeData.params[key]) {
                    if (Array.isArray(item[key]) && item[key].includes(routeData.params[key]) || item[key] === routeData.params[key]) {
                      acc.push(routeData.path.replace(reAfter, (0, _helpers.encode)(item.id)));
                    }
                  } else {
                    acc.push(routeData.path.replace(reAfter, (0, _helpers.encode)(item.id)));
                  }
                });
              }

              return acc;
            }, []));

          case 28:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[11, 17]]);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();