"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _set = require("babel-runtime/core-js/set");

var _set2 = _interopRequireDefault(_set);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _resolveUrlsFromPhenomicApi = require("./resolveUrlsFromPhenomicApi");

var _resolveUrlsFromPhenomicApi2 = _interopRequireDefault(_resolveUrlsFromPhenomicApi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:plugin:renderer-react");

var arrayUnique = function arrayUnique(array) {
  return [].concat((0, _toConsumableArray3.default)(new _set2.default(array)));
};

var flatten = function flatten(array) {
  var flattenedArray = [];
  array.forEach(function (item) {
    if (Array.isArray(item)) flattenedArray.push.apply(flattenedArray, (0, _toConsumableArray3.default)(flatten(item)));else flattenedArray.push(item);
  });

  return flattenedArray;
};

var resolveUrlsForDynamicParams = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(route) {
    var maybeResolvedRoute;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(
            // reference is incorrect? (eg: import { Thing } instead of import Thing)
            !route.component ||
            // no export?
            (0, _keys2.default)(route.component).length === 0 &&
            // $FlowFixMe we know, u don't
            route.component.constructor === Object)) {
              _context.next = 2;
              break;
            }

            throw new Error("Route with path '" + route.path + "' have no component (or an undefined value).\n" + "Check the component reference and its origin. Are the import/export correct?");

          case 2:
            _context.next = 4;
            return (0, _resolveUrlsFromPhenomicApi2.default)(route);

          case 4:
            maybeResolvedRoute = _context.sent;

            if (!(maybeResolvedRoute !== false)) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", maybeResolvedRoute);

          case 7:
            if (!route.component.getAllPossibleUrls) {
              _context.next = 11;
              break;
            }

            _context.next = 10;
            return route.component.getAllPossibleUrls({ path: route.path });

          case 10:
            return _context.abrupt("return", _context.sent);

          case 11:
            return _context.abrupt("return", route.path);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function resolveUrlsForDynamicParams(_x) {
    return _ref.apply(this, arguments);
  };
}();

var normalizePath = function normalizePath(path) {
  return path.replace(/^\//, "");
};

var resolveUrls = function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(_ref3) {
    var routes = _ref3.routes;
    var dynamicRoutes, flattenedDynamicRoutes, filtredDynamicRoutes, normalizedURLs;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return _promise2.default.all(routes.map(function (route) {
              return resolveUrlsForDynamicParams(route);
            }));

          case 2:
            dynamicRoutes = _context2.sent;
            flattenedDynamicRoutes = flatten(dynamicRoutes);
            filtredDynamicRoutes = flattenedDynamicRoutes.filter(function (url) {
              if (url.includes("*")) {
                debug(url + " is including a '*' but it has not been resolved: url is skipped");
                return false;
              }
              return true;
            });
            normalizedURLs = filtredDynamicRoutes.map(normalizePath);

            debug("normalize urls", normalizedURLs);
            return _context2.abrupt("return", arrayUnique(normalizedURLs));

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function resolveUrls(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.default = resolveUrls;