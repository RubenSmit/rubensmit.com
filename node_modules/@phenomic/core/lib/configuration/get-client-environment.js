"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

exports.default = getClientEnvironment;

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Grab NODE_ENV and PHENOMIC_* environment variables and prepare them to be
// injected into the application.


// inspired from https://github.com/facebook/create-react-app/blob/779dad55465de81972ec72257c734e4afae17094/packages/react-scripts/config/env.js

var NODE_ENV = process.env.NODE_ENV || "development";
var RE_PHENOMIC = /^PHENOMIC_/i;
var root = _path2.default.join(process.cwd(), ".env");

// https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use
// Don't include `.env.local` for `test` environment
// since normally you expect tests to produce the same
// results for everyone
var dotenvFiles = NODE_ENV !== "test" ? [root + "." + NODE_ENV + ".local", root + "." + NODE_ENV, root + ".local", root] : [root + "." + NODE_ENV, root];

// Load environment variables from .env* files. Suppress warnings using silent
// if this file is missing. dotenv will never modify any environment variables
// that have already been set.  Variable expansion is supported in .env files.
// https://github.com/motdotla/dotenv
// https://github.com/motdotla/dotenv-expand
dotenvFiles.forEach(function (dotenvFile) {
  if (_fs2.default.existsSync(dotenvFile)) {
    require("dotenv-expand")(require("dotenv").config({
      path: dotenvFile
    }));
  }
});

function getClientEnvironment(config) {
  process.env.PHENOMIC_APP_BASENAME = config.baseUrl.pathname;
  return (0, _keys2.default)(process.env).filter(function (key) {
    return RE_PHENOMIC.test(key);
  }).reduce(function (env, key) {
    env[key] = process.env[key];
    return env;
  }, {
    NODE_ENV: NODE_ENV
  });
}