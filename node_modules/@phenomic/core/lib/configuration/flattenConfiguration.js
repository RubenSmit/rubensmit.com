"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenPresets = undefined;

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _defaultConfig = require("../defaultConfig.js");

var _defaultConfig2 = _interopRequireDefault(_defaultConfig);

var _normalizeBaseUrl = require("./normalize-base-url.js");

var _normalizeBaseUrl2 = _interopRequireDefault(_normalizeBaseUrl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:core:configuration");

function normalizeModule(module) {
  var flatModule = module;
  var options = void 0;
  if (Array.isArray(module)) {
    if (module.length !== 2) {
      throw new Error("When using array to register a phenomic module, please an array with 2 items only" + "Given " + module.length);
    }
    flatModule = module[0];
    if (typeof module[0] !== "string" && typeof module[0] !== "function") {
      throw new Error("module should be a string or a function but received " + (0, _typeof3.default)(module[0]));
    }
    if (!module[1] || (0, _typeof3.default)(module[1]) !== "object") {
      throw new Error("options should be an object but received " + (0, _typeof3.default)(module[1]));
    }
    // $FlowFixMe we can't cover everything
    options = module[1];
  }
  var preNormalizedModule =
  // $FlowFixMe ðŸ¤«
  typeof flatModule === "string" ? // $FlowFixMe yeah yeah, I know what I am doing flow
  require(require.resolve(flatModule)) : flatModule;

  // for es6 transpiled code
  if ((typeof preNormalizedModule === "undefined" ? "undefined" : (0, _typeof3.default)(preNormalizedModule)) === "object" && preNormalizedModule && typeof preNormalizedModule.default === "function") {
    var normalizedModule = preNormalizedModule.default;
    // debug("normalizeModule (default)", normalizedModule);
    return {
      module: normalizedModule,
      options: options,
      name: typeof flatModule === "string" ? flatModule : normalizedModule.name
    };
  }
  if (typeof preNormalizedModule === "function") {
    var _normalizedModule = preNormalizedModule;
    // debug("normalizeModule", normalizedModule);
    return {
      module: _normalizedModule,
      options: options,
      name: typeof flatModule === "string" ? flatModule : _normalizedModule.name
    };
  }
  throw new Error("unknow module type " + (typeof module === "undefined" ? "undefined" : (0, _typeof3.default)(module)));
}

function flattenPresets(pluginsConfig, presetOptions) {
  debug("flattenPresets", pluginsConfig);
  var presets = (pluginsConfig.presets || []).map(normalizeModule);
  var pluginsFromPresets = presets.reduce(function (acc, preset) {
    var presetResult = preset.module(preset.options);
    var flattenPreset = flattenPresets(presetResult, preset.options);
    return acc.concat(flattenPreset);
  }, []);
  var pluginsFromPlugins = Array.isArray(pluginsConfig.plugins) ? pluginsConfig.plugins.map(normalizeModule) : pluginsConfig.plugins ? (0, _keys2.default)(pluginsConfig.plugins).map(function (k) {
    return (
      // $FlowFixMe ?
      normalizeModule(pluginsConfig.plugins[k])
    );
  }) : [];
  // inject preset options
  if (presetOptions) if (Array.isArray(presetOptions)) presetOptions.forEach(function (options) {
    var pluginName = options[0];
    var opts = options[1];
    var plugin = pluginsFromPlugins.find(function (plugin) {
      return plugin.name === pluginName;
    });
    if (!plugin) {
      throw new Error(pluginName + " not found to pass preset options");
    }
    if (opts) {
      plugin.options = (0, _extends3.default)({}, plugin.options || {}, opts);
    }
  });else (0, _keys2.default)(presetOptions).forEach(function (pluginName) {
    if (!pluginName) {
      debug("No plugin name found");
      return;
    }
    var plugin = pluginsFromPlugins.find(function (plugin) {
      return plugin.name === pluginName;
    });
    if (!plugin) {
      throw new Error(pluginName + " not found to pass preset options");
    }
    if (presetOptions && presetOptions[pluginName]) {
      plugin.options = (0, _extends3.default)({}, plugin.options || {}, presetOptions[pluginName]);
    }
  });
  var plugins = [].concat((0, _toConsumableArray3.default)(pluginsFromPresets), (0, _toConsumableArray3.default)(pluginsFromPlugins));
  debug("flattenPresets plugins", plugins);
  return plugins;
}

function initPlugins(plugins) {
  var partialConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return plugins.map(function (plugin) {
    var pluginInstance = plugin.module(partialConfig, plugin.options);
    debug("plugin", pluginInstance.name);
    if (Array.isArray(pluginInstance)) {
      throw new Error("Array of plugins should be specified in 'presets' section of your configuration");
    }
    return pluginInstance;
  });
}

function flattenConfiguration(config) {
  debug("flattenConfiguration", config);
  var partialConfig = {
    baseUrl: config.baseUrl ? (0, _normalizeBaseUrl2.default)(config.baseUrl) : _defaultConfig2.default.baseUrl,
    path: config.path || _defaultConfig2.default.path,
    content: config.content || _defaultConfig2.default.content,
    outdir: config.outdir || _defaultConfig2.default.outdir,
    port: config.port || _defaultConfig2.default.port,
    socketPort: config.socketPort || _defaultConfig2.default.socketPort,
    bundleName: config.bundleName || _defaultConfig2.default.bundleName,
    db: config.db || _defaultConfig2.default.db,
    plugins: []
  };
  var partialPlugins = flattenPresets({
    plugins: config.plugins || [],
    presets: config.presets || []
  });

  // instanciate plugins with config
  // $FlowFixMe whatever...
  partialConfig.plugins = initPlugins(partialPlugins, partialConfig);

  return partialConfig;
}

exports.flattenPresets = flattenPresets;
exports.default = flattenConfiguration;