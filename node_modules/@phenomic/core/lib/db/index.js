"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _objectWithoutProperties2 = require("babel-runtime/helpers/objectWithoutProperties");

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends4 = require("babel-runtime/helpers/extends");

var _extends5 = _interopRequireDefault(_extends4);

var _deepAssign = require("deep-assign");

var _deepAssign2 = _interopRequireDefault(_deepAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var glue = "$$";

var nullSub = "__null__";
var emptyDatabase = {};
var database = emptyDatabase;

var orderById = function orderById(a, b) {
  return b.id > a.id ? -1 : 1;
};

// if you update this function, please update docs/configuration.md section
function defaultSort() {
  var sort = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "date";

  return function (a, b) {
    // sort by asked flag
    var va = a.data[sort];
    var vb = b.data[sort];
    if (!va && vb) return -1;
    if (!vb && va) return 1;
    if (va && vb && vb > va) return -1;
    if (va && vb && va > vb) return 1;

    // fallbacks instead of weird order
    // sort by title
    if (b.data.title > a.data.title) return -1;
    if (a.data.title > b.data.title) return 1;

    // or sort by filename
    if (b.data.filename > a.data.filename) return -1;
    if (a.data.filename > b.data.filename) return 1;
    return 0;
  };
}

function getSublevel(sub, filter, filterValue) {
  if (!Array.isArray(sub)) {
    sub = [sub === null ? nullSub : sub];
  }
  var db = database[sub.join(glue)] || [];
  if (filter && filterValue && filter !== "default") {
    db = db.filter(function (item) {
      if (Array.isArray(item.data[filter])) {
        return item.data[filter].indexOf(filterValue) > -1;
      }
      return item.data[filter] === filterValue;
    });
  }
  return db;
}

function putToSublevel(subName, value) {
  if (!Array.isArray(subName)) {
    subName = [subName === null ? nullSub : subName];
  }
  var subname = subName.join(glue);
  var sub = database[subname] || [];
  database = (0, _extends5.default)({}, database, (0, _defineProperty3.default)({}, subname, [].concat((0, _toConsumableArray3.default)(sub.filter(function (item) {
    return item.id !== value.id;
  })), [value]).sort(orderById)));
}

function updateToSublevel(subName, value) {
  if (!Array.isArray(subName)) {
    subName = [subName === null ? nullSub : subName];
  }
  var subname = subName.join(glue);
  var sub = database[subname] || [];
  database = (0, _extends5.default)({}, database, (0, _defineProperty3.default)({}, subname, [].concat((0, _toConsumableArray3.default)(sub.filter(function (item) {
    return item.id !== value.id;
  })), [(0, _deepAssign2.default)({}, sub.find(function (item) {
    return item.id === value.id;
  }) || {}, value)]).sort(orderById)));
}

var NotFoundError = function (_Error) {
  (0, _inherits3.default)(NotFoundError, _Error);

  function NotFoundError() {
    var _ref;

    (0, _classCallCheck3.default)(this, NotFoundError);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var _this = (0, _possibleConstructorReturn3.default)(this, (_ref = NotFoundError.__proto__ || (0, _getPrototypeOf2.default)(NotFoundError)).call.apply(_ref, [this].concat(args)));

    _this.name = "NotFoundError";
    return _this;
  }

  return NotFoundError;
}(Error);

var createDB = function createDB(dbConfig) {
  var db = {
    _getDatabase: function _getDatabase() {
      return database;
    },
    _setDatabase: function _setDatabase(newDb) {
      database = newDb;
    },
    destroy: function destroy() {
      database = emptyDatabase;
    },
    put: function put(sub, id) {
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { data: {}, partial: {} };

      putToSublevel(sub, {
        data: value.data,
        partial: value.partial,
        id: id
      });
    },
    update: function update(sub, id) {
      var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : { data: {}, partial: {} };

      updateToSublevel(sub, {
        data: value.data,
        partial: value.partial,
        id: id
      });
    },
    get: function get(sub, id) {
      var item = getSublevel(sub).find(function (item) {
        return item.id === id;
      });
      if (typeof item === "undefined") {
        throw new NotFoundError("ID '" + id + "' not found in database ('" + String(sub) + "')");
      }
      var _item$data = item.data,
          body = _item$data.body,
          metadata = (0, _objectWithoutProperties3.default)(_item$data, ["body"]);

      var relatedData = getDataRelations(metadata);
      return {
        id: id,
        value: (0, _extends5.default)({}, relatedData, body ? { body: body } : {})
      };
    },
    getPartial: function getPartial(sub, id) {
      var item = getSublevel(sub).find(function (item) {
        return item.id === id;
      });
      if (!item) {
        return id;
      }
      var type = (0, _typeof3.default)(item.partial);
      if (type === "string" || type === "number" || type === "boolean") {
        return item.partial;
      }
      return (0, _extends5.default)({ id: id }, item.partial);
    },
    getList: function getList(sub) {
      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "default";
      var filterValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";

      var collection = getSublevel(sub, filter, filterValue);
      collection.sort(dbConfig.sortFunctions && query.sort && dbConfig.sortFunctions[query.sort] ? dbConfig.sortFunctions[query.sort] : defaultSort(query.sort));
      if (query.reverse) {
        collection = collection.concat().reverse();
      }
      if (query.gte) {
        var index = collection.findIndex(function (item) {
          return item.id === query.gte;
        });
        collection = index > -1 ? collection.slice(index) : collection;
      } else if (query.gt) {
        var _index = collection.findIndex(function (item) {
          return item.id === query.gt;
        });
        collection = _index > -1 ? collection.slice(_index + 1) : collection;
      } else if (query.lte) {
        var _index2 = collection.findIndex(function (item) {
          return item.id === query.lte;
        });
        collection = _index2 > -1 ? collection.slice(0, _index2 + 1) : collection;
      } else if (query.lt) {
        var _index3 = collection.findIndex(function (item) {
          return item.id === query.lt;
        });
        collection = _index3 > -1 ? collection.slice(0, _index3) : collection;
      }
      if (typeof query.limit === "number") {
        collection = collection.slice(0, Math.min(query.limit, collection.length));
      }

      return collection.map(function (item) {
        var value = db.getPartial(sub, item.id);
        var type = typeof value === "undefined" ? "undefined" : (0, _typeof3.default)(value);
        if (type === "string" || type === "number" || type === "boolean" || Array.isArray(value)) {
          return {
            id: item.id,
            value: value
          };
        }
        return (0, _extends5.default)({}, value, {
          id: item.id
        });
      });
    }
  };

  function getDataRelation(fieldName, ids) {
    try {
      if (Array.isArray(ids)) {
        return ids.map(function (id) {
          return db.getPartial(fieldName, id);
        });
      }
      return db.getPartial(fieldName, ids);
    } catch (error) {
      return ids;
    }
  }

  function getDataRelations(fields) {
    var ids = (0, _keys2.default)(fields);
    var resolvedValues = ids.map(function (id) {
      return getDataRelation(id, fields[id]);
    });
    return ids.reduce(function (resolvedFields, id, index) {
      resolvedFields[id] = resolvedValues[index];
      return resolvedFields;
    }, {});
  }

  return db;
};

exports.default = createDB;