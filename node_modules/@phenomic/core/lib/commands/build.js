"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var getContent = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(db, config) {
    var _this = this;

    var transformers, collectors;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            debug("getting content");
            transformers = config.plugins.filter(function (item) {
              return typeof item.transform === "function";
            });

            if (transformers.length) {
              _context2.next = 4;
              break;
            }

            throw Error("Phenomic expects at least a transform plugin");

          case 4:
            collectors = config.plugins.filter(function (item) {
              return typeof item.collectFile === "function";
            });

            if (collectors.length) {
              _context2.next = 7;
              break;
            }

            throw Error("Phenomic expects at least a collector plugin");

          case 7:
            _context2.next = 9;
            return _promise2.default.all((0, _keys2.default)(config.content).map(function () {
              var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(contentKey) {
                var contentPath, globs, folder, files;
                return _regenerator2.default.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        contentPath = void 0;
                        globs = void 0;
                        _context.prev = 2;
                        folder = void 0;

                        // "key(and folder)": ["glob/*"]

                        if (!Array.isArray(config.content[contentKey])) {
                          _context.next = 9;
                          break;
                        }

                        folder = _path2.default.join(config.path, contentKey);
                        // $FlowFixMe stfu
                        globs = config.content[contentKey];
                        _context.next = 15;
                        break;

                      case 9:
                        if (!(config.content[contentKey].root && config.content[contentKey].globs)) {
                          _context.next = 14;
                          break;
                        }

                        // "key": {root: folder, globs: ["glob/*"] }
                        folder = _path2.default.join(config.path, config.content[contentKey].root);
                        // $FlowFixMe stfu
                        globs = config.content[contentKey].globs;
                        _context.next = 15;
                        break;

                      case 14:
                        throw new Error("Unexpected config for 'content' option: " + config.content[contentKey].toString());

                      case 15:
                        _context.next = 17;
                        return (0, _getPath2.default)(folder);

                      case 17:
                        contentPath = _context.sent;
                        _context.next = 23;
                        break;

                      case 20:
                        _context.prev = 20;
                        _context.t0 = _context["catch"](2);

                        _log2.default.warn("no '" + contentKey + "' folder found or unable to read files. Please create and put files in this folder (or double check it) if you want the content to be accessible (eg: markdown or JSON files). ");

                      case 23:
                        if (!contentPath) {
                          _context.next = 29;
                          break;
                        }

                        files = (0, _watch.oneShot)({
                          path: contentPath,
                          // $FlowFixMe stfu
                          patterns: globs
                        });
                        _context.next = 27;
                        return db.destroy();

                      case 27:
                        _context.next = 29;
                        return _promise2.default.all(files.map(function (file) {
                          return (0, _processFile2.default)({
                            db: db,
                            fileKey: contentKey,
                            file: file,
                            transformers: transformers,
                            collectors: collectors
                          });
                        }));

                      case 29:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, _this, [[2, 20]]);
              }));

              return function (_x3) {
                return _ref2.apply(this, arguments);
              };
            }()));

          case 9:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function getContent(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var build = function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(config) {
    var _this2 = this;

    var db, phenomicAPIServer, runningPhenomicAPIServer, bundlers, bundler, assets, app, renderers, renderer, routes, nbUrls;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            console.log("‚ö°Ô∏è Hey! Let's get on with it");
            debug("cleaning dist");
            _rimraf2.default.sync("dist");

            process.env.NODE_ENV = process.env.NODE_ENV || "production";
            process.env.BABEL_ENV = process.env.BABEL_ENV || "production";
            process.env.PHENOMIC_ENV = "static";
            _context5.t0 = String;
            _context5.next = 9;
            return (0, _getPort2.default)();

          case 9:
            _context5.t1 = _context5.sent;
            process.env.PHENOMIC_RESTAPI_PORT = (0, _context5.t0)(_context5.t1);

            debug("building");
            debug("process.env.NODE_ENV", process.env.NODE_ENV);
            debug("process.env.BABEL_ENV", process.env.BABEL_ENV);
            debug("process.env.PHENOMIC_ENV", process.env.PHENOMIC_ENV);
            debug("process.env.PHENOMIC_RESTAPI_PORT", process.env.PHENOMIC_RESTAPI_PORT);
            db = (0, _db2.default)(config.db);
            phenomicAPIServer = (0, _api2.default)({ db: db, plugins: config.plugins });
            runningPhenomicAPIServer = phenomicAPIServer.listen(parseInt(process.env.PHENOMIC_RESTAPI_PORT, 10));

            debug("server ready");
            _context5.prev = 20;
            bundlers = config.plugins.filter(function (p) {
              return p.buildForPrerendering;
            });
            bundler = bundlers[0];
            _context5.next = 25;
            return _promise2.default.all(config.plugins.map(function (plugin) {
              return plugin.beforeBuild && plugin.beforeBuild();
            }));

          case 25:
            if (!(!bundler || !bundler.build)) {
              _context5.next = 27;
              break;
            }

            throw new Error("a bundler is required (plugin implementing `build`)");

          case 27:
            _context5.next = 29;
            return bundler.build();

          case 29:
            assets = _context5.sent;

            debug("assets", assets);
            console.log("üì¶ Webpack client build done " + (Date.now() - lastStamp) + "ms");
            lastStamp = Date.now();

            if (!(!bundler || !bundler.buildForPrerendering)) {
              _context5.next = 35;
              break;
            }

            throw new Error("a bundler is required (plugin implementing `buildForPrerendering`)");

          case 35:
            _context5.next = 37;
            return bundler.buildForPrerendering();

          case 37:
            app = _context5.sent;

            debug("app", app);
            console.log("üì¶ Webpack static build done " + (Date.now() - lastStamp) + "ms");
            lastStamp = Date.now(); // Retreive content
            _context5.next = 43;
            return getContent(db, config);

          case 43:
            console.log("üìù Content processed " + (Date.now() - lastStamp) + "ms");
            lastStamp = Date.now();
            renderers = config.plugins.filter(function (p) {
              return p.getRoutes;
            });
            renderer = renderers[0];

            if (!(!renderer || !renderer.getRoutes)) {
              _context5.next = 49;
              break;
            }

            throw new Error("a renderer is required (plugin implementing `getRoutes`)");

          case 49:
            routes = renderer.getRoutes(app);
            nbUrls = 0;
            _context5.next = 53;
            return _promise2.default.all(config.plugins.map(function () {
              var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(plugin) {
                var renderStatic, urls;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        if (plugin.resolveURLs) {
                          _context4.next = 3;
                          break;
                        }

                        debug("nor 'resolveURLs' method for plugin ", plugin.name);
                        return _context4.abrupt("return");

                      case 3:
                        if (plugin.renderStatic) {
                          _context4.next = 6;
                          break;
                        }

                        debug("nor 'renderStatic' method for plugin ", plugin.name);
                        return _context4.abrupt("return");

                      case 6:
                        if (!(typeof plugin.resolveURLs !== "function")) {
                          _context4.next = 8;
                          break;
                        }

                        throw new Error("'resolveURLs' method from " + plugin.name + " must be a function, received '" + (0, _typeof3.default)(plugin.resolveURLs) + "'");

                      case 8:
                        if (!(typeof plugin.renderStatic !== "function")) {
                          _context4.next = 10;
                          break;
                        }

                        throw new Error("'renderStatic' method from " + plugin.name + " must be a function, received '" + (0, _typeof3.default)(plugin.renderStatic) + "'");

                      case 10:
                        renderStatic = plugin.renderStatic;
                        _context4.next = 13;
                        return plugin.resolveURLs({
                          routes: routes
                        });

                      case 13:
                        urls = _context4.sent;

                        nbUrls += urls.length;
                        debug("urls have been resolved for ", plugin.name, urls);
                        _context4.next = 18;
                        return (0, _pMap2.default)(urls, function () {
                          var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(location) {
                            var files;
                            return _regenerator2.default.wrap(function _callee3$(_context3) {
                              while (1) {
                                switch (_context3.prev = _context3.next) {
                                  case 0:
                                    debug("'" + location + "': prepend file and deps");
                                    _context3.next = 3;
                                    return renderStatic({
                                      app: app,
                                      assets: assets,
                                      location: location
                                    });

                                  case 3:
                                    files = _context3.sent;

                                    debug("'" + location + "': files & deps collected", files);
                                    return _context3.abrupt("return", _promise2.default.all(files.map(function (file) {
                                      return (0, _writeFile2.default)(_path2.default.join(config.outdir, decodeURIComponent(file.path)), file.contents);
                                    })));

                                  case 6:
                                  case "end":
                                    return _context3.stop();
                                }
                              }
                            }, _callee3, _this2);
                          }));

                          return function (_x6) {
                            return _ref5.apply(this, arguments);
                          };
                        }(), { concurrency: 50 });

                      case 18:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, _this2);
              }));

              return function (_x5) {
                return _ref4.apply(this, arguments);
              };
            }()));

          case 53:
            if (nbUrls === 0) {
              console.log(_logSymbols2.default.warning + " No URLs resolved. You should probably double-check your routes. If you are using a single '*' route, you need to add an '/' to get a least a static entry point.");
            }
            console.log("üìÉ Pre-rendering finished " + (Date.now() - lastStamp) + "ms");
            lastStamp = Date.now();

            _context5.next = 58;
            return _promise2.default.all(config.plugins.map(function (plugin) {
              return plugin.afterBuild && plugin.afterBuild();
            }));

          case 58:

            console.log("üìÉ After build hook finished " + (Date.now() - lastStamp) + "ms");
            lastStamp = Date.now();

            if (runningPhenomicAPIServer) {
              runningPhenomicAPIServer.close();
            }
            debug("server closed");
            _context5.next = 69;
            break;

          case 64:
            _context5.prev = 64;
            _context5.t2 = _context5["catch"](20);

            if (runningPhenomicAPIServer) {
              runningPhenomicAPIServer.close();
            }
            debug("server closed due to error");
            throw _context5.t2;

          case 69:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5, this, [[20, 64]]);
  }));

  return function build(_x4) {
    return _ref3.apply(this, arguments);
  };
}();

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _logSymbols = require("log-symbols");

var _logSymbols2 = _interopRequireDefault(_logSymbols);

var _getPort = require("get-port");

var _getPort2 = _interopRequireDefault(_getPort);

var _rimraf = require("rimraf");

var _rimraf2 = _interopRequireDefault(_rimraf);

var _pMap = require("p-map");

var _pMap2 = _interopRequireDefault(_pMap);

var _watch = require("../watch");

var _processFile = require("../injection/processFile");

var _processFile2 = _interopRequireDefault(_processFile);

var _api = require("../api");

var _api2 = _interopRequireDefault(_api);

var _writeFile = require("../utils/writeFile");

var _writeFile2 = _interopRequireDefault(_writeFile);

var _db = require("../db");

var _db2 = _interopRequireDefault(_db);

var _log = require("../utils/log");

var _log2 = _interopRequireDefault(_log);

var _getPath = require("../utils/getPath");

var _getPath2 = _interopRequireDefault(_getPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:core:commands:build");

var lastStamp = Date.now();

exports.default = function (options) {
  return build(options);
};