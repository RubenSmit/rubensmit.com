"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var createDevServer = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(_ref2) {
    var _this = this;

    var config = _ref2.config;
    var devServer;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            debug("creating dev server");
            devServer = (0, _express2.default)();
            _context3.next = 4;
            return _promise2.default.all(config.plugins.map(function () {
              var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(plugin) {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        if (plugin.addDevServerMiddlewares) debug("adding dev server middlewares for " + plugin.name);

                        if (!plugin.addDevServerMiddlewares) {
                          _context2.next = 6;
                          break;
                        }

                        _context2.next = 4;
                        return plugin.addDevServerMiddlewares();

                      case 4:
                        _context2.t0 = function () {
                          var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(m) {
                            var resolved;
                            return _regenerator2.default.wrap(function _callee$(_context) {
                              while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    _context.next = 2;
                                    return m;

                                  case 2:
                                    resolved = _context.sent;

                                    if (resolved) devServer.use(resolved);else debug("A middleware hasn't returned anything for " + plugin.name, ", skipping", m);

                                  case 4:
                                  case "end":
                                    return _context.stop();
                                }
                              }
                            }, _callee, _this);
                          }));

                          return function (_x3) {
                            return _ref4.apply(this, arguments);
                          };
                        }();

                        return _context2.abrupt("return", _context2.sent.map(_context2.t0));

                      case 6:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, _this);
              }));

              return function (_x2) {
                return _ref3.apply(this, arguments);
              };
            }()));

          case 4:
            return _context3.abrupt("return", devServer);

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function createDevServer(_x) {
    return _ref.apply(this, arguments);
  };
}();

var start = function () {
  var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(config) {
    var _this3 = this;

    var db, phenomicServer, bundlerServer, renderers, renderer, transformers, collectors, io, filesPerContentKey, server;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            process.env.NODE_ENV = process.env.NODE_ENV || "development";
            process.env.BABEL_ENV = process.env.BABEL_ENV || "development";
            process.env.PHENOMIC_ENV = "development";
            process.env.PHENOMIC_RESTAPI_PORT = String(config.port);
            process.env.PHENOMIC_SOCKET_PORT = String(config.socketPort);
            debug("starting phenomic server");
            db = (0, _db2.default)(config.db);
            phenomicServer = (0, _api2.default)({ db: db, plugins: config.plugins });
            _context7.next = 10;
            return createDevServer({ config: config });

          case 10:
            bundlerServer = _context7.sent;
            renderers = config.plugins.filter(function (p) {
              return p.getRoutes;
            });
            renderer = renderers[0];
            transformers = config.plugins.filter(function (item) {
              return typeof item.transform === "function";
            });

            if (transformers.length) {
              _context7.next = 16;
              break;
            }

            throw new Error("Phenomic expects at least a transform plugin");

          case 16:
            collectors = config.plugins.filter(function (item) {
              return typeof item.collectFile === "function";
            });

            if (collectors.length) {
              _context7.next = 19;
              break;
            }

            throw new Error("Phenomic expects at least a collector plugin");

          case 19:
            io = (0, _socket2.default)(config.socketPort);
            filesPerContentKey = {};
            _context7.next = 23;
            return _promise2.default.all((0, _keys2.default)(config.content).map(function () {
              var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(contentKey) {
                var folder, globs, watcher;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.prev = 0;
                        folder = void 0;
                        globs = void 0;

                        // "key(and folder)": ["glob/*"]

                        if (!Array.isArray(config.content[contentKey])) {
                          _context6.next = 8;
                          break;
                        }

                        folder = _path2.default.join(config.path, contentKey);
                        // $FlowFixMe stfu
                        globs = config.content[contentKey];
                        _context6.next = 14;
                        break;

                      case 8:
                        if (!(config.content[contentKey].root && config.content[contentKey].globs)) {
                          _context6.next = 13;
                          break;
                        }

                        // "key": {root: folder, globs: ["glob/*"] }
                        folder = _path2.default.join(config.path, config.content[contentKey].root);
                        // $FlowFixMe stfu
                        globs = config.content[contentKey].globs;
                        _context6.next = 14;
                        break;

                      case 13:
                        throw new Error("Unexpected config for 'content' option: " + config.content[contentKey].toString());

                      case 14:
                        _context6.t0 = _watch2.default;
                        _context6.next = 17;
                        return (0, _getPath2.default)(folder);

                      case 17:
                        _context6.t1 = _context6.sent;
                        _context6.t2 = globs;
                        _context6.t3 = {
                          path: _context6.t1,
                          patterns: _context6.t2
                        };
                        watcher = (0, _context6.t0)(_context6.t3);


                        watcher.onChange(function () {
                          var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(files /* deletedFiles */) {
                            var _this2 = this;

                            return _regenerator2.default.wrap(function _callee5$(_context5) {
                              while (1) {
                                switch (_context5.prev = _context5.next) {
                                  case 0:
                                    // currently our db is stupid: we don't do removal
                                    // so instead we nuke the db each times there is a tiny change
                                    // for now it's not creating any problem, but it's clearly something
                                    // we need to improve for HUGE website
                                    // @todo: don't nuke the db and think about a way to remove deleted
                                    // files & related injected data (see collector-files)
                                    filesPerContentKey[contentKey] = files;
                                    debug("watcher onChange event");
                                    _context5.prev = 2;
                                    _context5.next = 5;
                                    return db.destroy();

                                  case 5:
                                    _context5.next = 7;
                                    return _promise2.default.all((0, _keys2.default)(filesPerContentKey).map(function () {
                                      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(localContentKey) {
                                        return _regenerator2.default.wrap(function _callee4$(_context4) {
                                          while (1) {
                                            switch (_context4.prev = _context4.next) {
                                              case 0:
                                                _context4.next = 2;
                                                return _promise2.default.all(filesPerContentKey[localContentKey].map(function (file) {
                                                  return (0, _processFile2.default)({
                                                    db: db,
                                                    fileKey: localContentKey,
                                                    file: file,
                                                    transformers: transformers,
                                                    collectors: collectors
                                                  });
                                                }));

                                              case 2:
                                                return _context4.abrupt("return", _context4.sent);

                                              case 3:
                                              case "end":
                                                return _context4.stop();
                                            }
                                          }
                                        }, _callee4, _this2);
                                      }));

                                      return function (_x7) {
                                        return _ref8.apply(this, arguments);
                                      };
                                    }()));

                                  case 7:
                                    _context5.next = 12;
                                    break;

                                  case 9:
                                    _context5.prev = 9;
                                    _context5.t0 = _context5["catch"](2);

                                    setTimeout(function () {
                                      throw _context5.t0;
                                    }, 1);

                                  case 12:
                                    // note: we could emit faster but does it's worth it?
                                    io.emit("change");

                                  case 13:
                                  case "end":
                                    return _context5.stop();
                                }
                              }
                            }, _callee5, this, [[2, 9]]);
                          }));

                          return function (_x6) {
                            return _ref7.apply(this, arguments);
                          };
                        }());
                        _context6.next = 27;
                        break;

                      case 24:
                        _context6.prev = 24;
                        _context6.t4 = _context6["catch"](0);

                        _log2.default.warn("no '" + contentKey + "' folder found or unable to read files. Please create and put files in this folder (or double check it) if you want the content to be accessible (eg: markdown or JSON files). ");

                      case 27:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6, _this3, [[0, 24]]);
              }));

              return function (_x5) {
                return _ref6.apply(this, arguments);
              };
            }()));

          case 23:

            bundlerServer.use(config.baseUrl.pathname + "phenomic", phenomicServer);
            // $FlowFixMe flow is lost with async function for express
            bundlerServer.get("*", function (req, res) {
              res.type(".html");
              if (typeof renderer.renderDevServer !== "function") {
                res.end("Phenomic renderer requires a 'renderDevServer' function to be exposed");
              } else {
                res.end(renderer.renderDevServer({
                  assets: res.locals.assets,
                  location: req.originalUrl
                }));
              }
            });
            server = bundlerServer.listen(config.port);

            if (server) {
              server.on("error", function (err) {
                if (err.errno === "EADDRINUSE") {
                  var existingProcess = (0, _getProcessForPort2.default)(err.port);
                  (0, _log2.default)(_chalk2.default.yellow("Something is already running on port " + err.port + ". " + (existingProcess ? "Probably:\n" + existingProcess + "\n" : "")));
                } else {
                  (0, _log2.default)(err);
                }
                process.exit(1);
              });
            }
            console.log("\u2728 Open http://localhost:" + config.port + config.baseUrl.pathname);

          case 28:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  return function start(_x4) {
    return _ref5.apply(this, arguments);
  };
}();

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _socket = require("socket.io");

var _socket2 = _interopRequireDefault(_socket);

var _getProcessForPort = require("react-dev-utils/getProcessForPort");

var _getProcessForPort2 = _interopRequireDefault(_getProcessForPort);

var _chalk = require("chalk");

var _chalk2 = _interopRequireDefault(_chalk);

var _watch = require("../watch");

var _watch2 = _interopRequireDefault(_watch);

var _processFile = require("../injection/processFile");

var _processFile2 = _interopRequireDefault(_processFile);

var _db = require("../db");

var _db2 = _interopRequireDefault(_db);

var _api = require("../api");

var _api2 = _interopRequireDefault(_api);

var _log = require("../utils/log");

var _log2 = _interopRequireDefault(_log);

var _getPath = require("../utils/getPath");

var _getPath2 = _interopRequireDefault(_getPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:core:commands:start");

exports.default = start;