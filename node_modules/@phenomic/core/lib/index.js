"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _cosmiconfig = require("cosmiconfig");

var _cosmiconfig2 = _interopRequireDefault(_cosmiconfig);

var _serve = require("serve");

var _serve2 = _interopRequireDefault(_serve);

var _flattenConfiguration = require("./configuration/flattenConfiguration.js");

var _flattenConfiguration2 = _interopRequireDefault(_flattenConfiguration);

var _start2 = require("./commands/start.js");

var _start3 = _interopRequireDefault(_start2);

var _build2 = require("./commands/build.js");

var _build3 = _interopRequireDefault(_build2);

var _log = require("./utils/log.js");

var _log2 = _interopRequireDefault(_log);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var handleError = function handleError(error) {
  if (error.message) _log2.default.error(error.message);
  if (error.stack) _log2.default.error(error.stack);
  process.exit(1);
};

function normalizeConfiguration(config) {
  var configExplorer = (0, _cosmiconfig2.default)("phenomic", { cache: false });
  return configExplorer.load(process.cwd()).then(function (result) {
    if (result === null) {
      throw new Error("No configuration file found. Please add a 'phenomic' section in package.json or " + "create a file named .phenomicrc(.json|.yaml)? or phenomic.config.js." + "\nSee https://phenomic.io/docs/configuration/");
    }
    return (0, _flattenConfiguration2.default)((0, _extends3.default)({}, result.config, config || {}));
  }).catch(handleError);
}

exports.default = {
  start: function start(inputConfig) {
    normalizeConfiguration(inputConfig).then(_start3.default).catch(handleError);
  },
  build: function build(inputConfig) {
    normalizeConfiguration(inputConfig).then(_build3.default).catch(handleError);
  },
  preview: function preview(inputConfig) {
    var _this = this;

    return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
      var config;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return normalizeConfiguration(inputConfig);

            case 3:
              config = _context.sent;
              _context.next = 6;
              return (0, _build3.default)(config);

            case 6:
              (0, _log2.default)("\u26A1\uFE0F Serving on http://localhost:" + config.port + config.baseUrl.pathname);
              (0, _serve2.default)(config.outdir, {
                port: config.port
              });
              _context.next = 13;
              break;

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](0);

              handleError(_context.t0);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, _this, [[0, 10]]);
    }))();
  }
};