"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _express = require("express");

var _express2 = _interopRequireDefault(_express);

var _package = require("../../package.json");

var _package2 = _interopRequireDefault(_package);

var _log = require("../utils/log");

var _log2 = _interopRequireDefault(_log);

var _helpers = require("./helpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require("debug")("phenomic:core:api");

var connect = function connect(list, limit) {
  var previousList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  var hasNextPage = limit === undefined ? false : list.length > limit;
  var hasPreviousPage = previousList.length > 0;
  var previousPageIsFirst = limit ? previousList.length <= limit : false;
  // we are retrieving limit + 1 to know if there is more page or not
  // so when getting the previous item, we need to check if we want the last
  // item or the one before (since we added one to the limit)
  var previousIndex = previousList.length - 1 - (previousPageIsFirst ? 0 : 1);
  var nextIndex = list.length - 1;
  return {
    previousPageIsFirst: previousPageIsFirst,
    previous: hasPreviousPage && previousList[previousIndex] ? (0, _helpers.encode)(previousList[previousIndex].id) : undefined,
    next: hasNextPage && list[nextIndex] ? (0, _helpers.encode)(list[nextIndex].id) : undefined,
    list: list.slice(0, limit)
  };
};

function createAPIServer(_ref) {
  var db = _ref.db,
      plugins = _ref.plugins;

  debug("creating server");
  var apiServer = (0, _express2.default)();

  apiServer.get("/", function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(req, res) {
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              debug("get api version");
              res.json({
                engine: "phenomic",
                version: _package2.default.version
              });

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function (_x2, _x3) {
      return _ref2.apply(this, arguments);
    };
  }());

  apiServer.get("/:path/by-:filter/:value/:order/:sort.json", function () {
    var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(req, res) {
      var sort, reverse, list;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              debug(req.url, (0, _stringify2.default)(req.params));
              _context2.prev = 1;
              sort = req.params.sort;
              reverse = req.params.order === "desc";
              _context2.next = 6;
              return db.getList(req.params.path, {
                sort: sort,
                reverse: reverse
              }, req.params.filter, req.params.value);

            case 6:
              list = _context2.sent;

              res.json(connect(list));
              _context2.next = 15;
              break;

            case 10:
              _context2.prev = 10;
              _context2.t0 = _context2["catch"](1);

              _log2.default.error(_context2.t0.message);
              debug(_context2.t0);
              res.status(404).end();

            case 15:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this, [[1, 10]]);
    }));

    return function (_x4, _x5) {
      return _ref3.apply(this, arguments);
    };
  }());

  apiServer.get("/:path/by-:filter/:value/:order/:sort/limit-:limit.json", function () {
    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(req, res) {
      var limit, sort, reverse, list;
      return _regenerator2.default.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              debug(req.url, (0, _stringify2.default)(req.params));
              _context3.prev = 1;
              limit = parseInt(req.params.limit);
              sort = req.params.sort;
              reverse = req.params.order === "desc";
              _context3.next = 7;
              return db.getList(req.params.path, {
                limit: limit + 1,
                sort: sort,
                reverse: reverse
              }, req.params.filter, req.params.value);

            case 7:
              list = _context3.sent;

              res.json(connect(list, limit));
              _context3.next = 16;
              break;

            case 11:
              _context3.prev = 11;
              _context3.t0 = _context3["catch"](1);

              _log2.default.error(_context3.t0.message);
              debug(_context3.t0);
              res.status(404).end();

            case 16:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this, [[1, 11]]);
    }));

    return function (_x6, _x7) {
      return _ref4.apply(this, arguments);
    };
  }());

  apiServer.get("/:path/by-:filter/:value/:order/:sort/limit-:limit/after-:after.json", function () {
    var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(req, res) {
      var limit, after, sort, reverse, _ref6, _ref7, list, previousList;

      return _regenerator2.default.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              debug(req.url, (0, _stringify2.default)(req.params));
              _context4.prev = 1;
              limit = parseInt(req.params.limit);
              after = (0, _helpers.decode)(req.params.after);
              // @todo check lt validity (exist?); otherwise, trigger an error (404?)
              // cause during dev all "lt" are responding 200, even random values
              // but in production, it's not the case as only known values are
              // generated as endpoints

              sort = req.params.sort;
              reverse = req.params.order === "desc";
              _context4.next = 8;
              return _promise2.default.all([db.getList(req.params.path, {
                limit: limit + 1,
                gte: after,
                sort: sort,
                reverse: reverse
              }, req.params.filter, req.params.value), db.getList(req.params.path, {
                limit: limit + 1,
                gt: after,
                sort: sort,
                reverse: !reverse
              }, req.params.filter, req.params.value)]);

            case 8:
              _ref6 = _context4.sent;
              _ref7 = (0, _slicedToArray3.default)(_ref6, 2);
              list = _ref7[0];
              previousList = _ref7[1];

              res.json(connect(list, limit, previousList));
              _context4.next = 20;
              break;

            case 15:
              _context4.prev = 15;
              _context4.t0 = _context4["catch"](1);

              _log2.default.error(_context4.t0.message);
              debug(_context4.t0);
              res.status(404).end();

            case 20:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, this, [[1, 15]]);
    }));

    return function (_x8, _x9) {
      return _ref5.apply(this, arguments);
    };
  }());

  apiServer.get("/:path/item/*?.json", function () {
    var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(req, res) {
      var resource, _resource;

      return _regenerator2.default.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              debug(req.url, (0, _stringify2.default)(req.params));
              _context5.prev = 1;

              if (req.params["0"]) {
                _context5.next = 9;
                break;
              }

              _context5.next = 5;
              return db.get(null, req.params.path);

            case 5:
              resource = _context5.sent;

              res.json(resource.value);
              _context5.next = 13;
              break;

            case 9:
              _context5.next = 11;
              return db.get(req.params.path, req.params["0"]);

            case 11:
              _resource = _context5.sent;

              res.json(_resource.value);

            case 13:
              _context5.next = 20;
              break;

            case 15:
              _context5.prev = 15;
              _context5.t0 = _context5["catch"](1);

              _log2.default.error(_context5.t0.message);
              debug(_context5.t0);
              res.status(404).end();

            case 20:
            case "end":
              return _context5.stop();
          }
        }
      }, _callee5, this, [[1, 15]]);
    }));

    return function (_x10, _x11) {
      return _ref8.apply(this, arguments);
    };
  }());

  apiServer.get("/by-:filter/:value/:order/:sort.json", function () {
    var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(req, res) {
      var sort, reverse, list;
      return _regenerator2.default.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              debug(req.url, (0, _stringify2.default)(req.params));
              _context6.prev = 1;
              sort = req.params.sort;
              reverse = req.params.order === "desc";
              _context6.next = 6;
              return db.getList(null, {
                sort: sort,
                reverse: reverse
              }, req.params.filter, req.params.value);

            case 6:
              list = _context6.sent;

              res.json(connect(list));
              _context6.next = 15;
              break;

            case 10:
              _context6.prev = 10;
              _context6.t0 = _context6["catch"](1);

              _log2.default.error(_context6.t0.message);
              debug(_context6.t0);
              res.status(404).end();

            case 15:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this, [[1, 10]]);
    }));

    return function (_x12, _x13) {
      return _ref9.apply(this, arguments);
    };
  }());

  apiServer.get("/by-:filter/:value/:order/:sort/limit-:limit.json", function () {
    var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(req, res) {
      var limit, sort, reverse, list;
      return _regenerator2.default.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              debug(req.url, (0, _stringify2.default)(req.params));
              _context7.prev = 1;
              limit = parseInt(req.params.limit);
              sort = req.params.sort;
              reverse = req.params.order === "desc";
              _context7.next = 7;
              return db.getList(null, {
                limit: limit + 1,
                sort: sort,
                reverse: reverse
              }, req.params.filter, req.params.value);

            case 7:
              list = _context7.sent;

              res.json(connect(list, limit));
              _context7.next = 16;
              break;

            case 11:
              _context7.prev = 11;
              _context7.t0 = _context7["catch"](1);

              _log2.default.error(_context7.t0.message);
              debug(_context7.t0);
              res.status(404).end();

            case 16:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this, [[1, 11]]);
    }));

    return function (_x14, _x15) {
      return _ref10.apply(this, arguments);
    };
  }());

  apiServer.get("/by-:filter/:value/:order/:sort/limit-:limit/after-:after.json", function () {
    var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(req, res) {
      var limit, after, sort, reverse, _ref12, _ref13, list, previousList;

      return _regenerator2.default.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              debug(req.url, (0, _stringify2.default)(req.params));
              _context8.prev = 1;
              limit = parseInt(req.params.limit);
              after = (0, _helpers.decode)(req.params.after);
              // @todo check lt validity (exist?); otherwise, trigger an error (404?)
              // cause during dev all "lt" are responding 200, even random values
              // but in production, it's not the case as only known values are
              // generated as endpoints

              sort = req.params.sort;
              reverse = req.params.order === "desc";
              _context8.next = 8;
              return _promise2.default.all([db.getList(null, {
                limit: limit + 1,
                gte: after,
                sort: sort,
                reverse: reverse
              }, req.params.filter, req.params.value), db.getList(null, {
                limit: limit + 1,
                gt: after,
                sort: sort,
                reverse: !reverse
              }, req.params.filter, req.params.value)]);

            case 8:
              _ref12 = _context8.sent;
              _ref13 = (0, _slicedToArray3.default)(_ref12, 2);
              list = _ref13[0];
              previousList = _ref13[1];

              res.json(connect(list, limit, previousList));
              _context8.next = 20;
              break;

            case 15:
              _context8.prev = 15;
              _context8.t0 = _context8["catch"](1);

              _log2.default.error(_context8.t0.message);
              debug(_context8.t0);
              res.status(404).end();

            case 20:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this, [[1, 15]]);
    }));

    return function (_x16, _x17) {
      return _ref11.apply(this, arguments);
    };
  }());

  apiServer.get("/item/*?.json", function () {
    var _ref14 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(req, res) {
      var id, resource;
      return _regenerator2.default.wrap(function _callee9$(_context9) {
        while (1) {
          switch (_context9.prev = _context9.next) {
            case 0:
              debug(req.url, (0, _stringify2.default)(req.params));
              // /item/.json means you want /item/index.json
              // (because thing/index.md => thing)
              id = req.params["0"] || "index";
              _context9.prev = 2;
              _context9.next = 5;
              return db.get(null, id);

            case 5:
              resource = _context9.sent;

              res.json(resource.value);
              _context9.next = 14;
              break;

            case 9:
              _context9.prev = 9;
              _context9.t0 = _context9["catch"](2);

              _log2.default.error(_context9.t0.message);
              debug(_context9.t0);
              res.status(404).end();

            case 14:
            case "end":
              return _context9.stop();
          }
        }
      }, _callee9, this, [[2, 9]]);
    }));

    return function (_x18, _x19) {
      return _ref14.apply(this, arguments);
    };
  }());

  // Install the plugins
  plugins.forEach(function (plugin) {
    if (typeof plugin.extendAPI === "function") {
      debug("installing plugin '" + plugin.name + "'");
      if (typeof plugin.extendAPI === "function") {
        plugin.extendAPI({ apiServer: apiServer, db: db });
      }
    } else {
      debug("plugin '" + plugin.name + "' have no API definition");
    }
  });

  return apiServer;
}

exports.default = createAPIServer;