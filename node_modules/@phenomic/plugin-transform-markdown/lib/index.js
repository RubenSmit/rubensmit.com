"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _lodash = require("lodash.deburr");

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require("lodash.kebabcase");

var _lodash4 = _interopRequireDefault(_lodash3);

var _grayMatter = require("gray-matter");

var _grayMatter2 = _interopRequireDefault(_grayMatter);

var _unifiedProcessor = require("@phenomic/helpers-transform/lib/unifiedProcessor");

var _unifiedProcessor2 = _interopRequireDefault(_unifiedProcessor);

var _extractMetaFromBodyNode = require("@phenomic/helpers-transform/lib/extractMetaFromBodyNode");

var _extractMetaFromBodyNode2 = _interopRequireDefault(_extractMetaFromBodyNode);

var _defaultOptions = require("./default-options");

var _defaultOptions2 = _interopRequireDefault(_defaultOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line
var debug = require("debug")("phenomic:plugin:transform-markdown");

// void? https://github.com/facebook/flow/issues/2977

var name = "@phenomic/plugin-transform-markdown";

var transformMarkdown = function transformMarkdown(config, options) {
  var processor = (0, _unifiedProcessor2.default)({
    output: options && options.output || _defaultOptions2.default.output,
    plugins: options && options.plugins || _defaultOptions2.default.plugins
  });

  return {
    name: name,
    supportedFileTypes: ["md", "markdown"],
    transform: function transform(_ref) {
      var file = _ref.file,
          contents = _ref.contents;

      debug("transforming " + file.fullpath);
      var front = (0, _grayMatter2.default)(contents.toString());
      debug("front matter for " + file.fullpath, front.data);
      // $FlowFixMe it's here, I can feel it Flow
      var body = processor.processSync(front.content).contents;
      var partial = (0, _extends3.default)({
        // title fallback
        title: file.name
      }, (0, _extractMetaFromBodyNode2.default)(body), front.data, Array.isArray(front.data.tags) ? { tags: front.data.tags.map(function (tag) {
          return (0, _lodash4.default)((0, _lodash2.default)(tag));
        }) } : {});

      return {
        data: (0, _extends3.default)({}, partial, {
          body: body
        }),
        partial: partial
      };
    }
  };
};

exports.default = transformMarkdown;